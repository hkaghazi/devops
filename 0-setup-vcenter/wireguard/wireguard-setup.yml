---
- name: Setup WireGuard VPN Server
  hosts: localhost
  connection: local
  become: yes

  vars:
    wg_interface: wg0
    wg_port: 51820
    wg_network: 10.10.0.0/24
    wg_server_ip: 10.10.0.1
    wg_conf_dir: /etc/wireguard
    wg_private_key_path: "{{ wg_conf_dir }}/server_private.key"
    wg_public_key_path: "{{ wg_conf_dir }}/server_public.key"
    wg_conf_file: "{{ wg_conf_dir }}/{{ wg_interface }}.conf"

  tasks:
    - name: Install WireGuard
      apt:
        name: wireguard
        state: present
        update_cache: yes

    - name: Create WireGuard config directory
      file:
        path: "{{ wg_conf_dir }}"
        state: directory
        mode: '0700'

    - name: Generate server private key
      command: wg genkey
      register: private_key
      when: not lookup('file', wg_private_key_path, errors='ignore')
      changed_when: private_key.stdout != ''

    - name: Save private key
      copy:
        content: "{{ private_key.stdout }}"
        dest: "{{ wg_private_key_path }}"
        mode: '0600'
      when: private_key is defined

    - name: Generate server public key
      command: "bash -c 'echo {{ private_key.stdout }} | wg pubkey'"
      register: public_key
      when: private_key is defined

    - name: Save public key
      copy:
        content: "{{ public_key.stdout }}"
        dest: "{{ wg_public_key_path }}"
        mode: '0644'
      when: public_key is defined

    - name: Read existing private key (fallback)
      slurp:
        src: "{{ wg_private_key_path }}"
      register: slurped_private_key
      when: private_key is not defined

    - name: Decode private key
      set_fact:
        server_private_key: "{{ slurped_private_key.content | b64decode }}"
      when: private_key is not defined

    - name: Generate WireGuard config file
      copy:
        dest: "{{ wg_conf_file }}"
        mode: '0600'
        content: |
          [Interface]
          Address = {{ wg_server_ip }}/24
          SaveConfig = true
          ListenPort = {{ wg_port }}
          PrivateKey = {{ (private_key.stdout if private_key is defined else server_private_key) }}
          # Uncomment if you want to enable forwarding
          PostUp = iptables -t nat -A POSTROUTING -s 10.10.0.0/24 -o ens192 -j MASQUERADE
          PostDown = iptables -t nat -D POSTROUTING -s 10.10.0.0/24 -o ens192 -j MASQUERADE

    - name: Enable IP forwarding (IPv4)
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        sysctl_set: yes
        reload: yes

    - name: Enable and start WireGuard
      systemd:
        name: "wg-quick@{{ wg_interface }}"
        enabled: yes
        state: started
